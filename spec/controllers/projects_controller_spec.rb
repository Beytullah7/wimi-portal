require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProjectsController, type: :controller do
  before(:each) do
    @user = create(:user)
    create(:wimi, user: @user)
    login_with @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      title: 'My Project',
      chair_id: @user.chair.id
    }
  }
  let(:invalid_attributes) {
    {
      title: ''
    }
  }

  describe 'GET #index' do
    it 'lists projects of user' do
      project = Project.create! valid_attributes
      project.add_user @user

      get :index, {}

      expect(assigns(:projects))
    end
  end

  describe 'GET #show' do
    it 'assigns the requested project as @project' do
      project = Project.create! valid_attributes

      get :show, {id: project.to_param}

      expect(assigns(:project)).to eq(project)
    end
  end

  describe 'GET #new' do
    it 'assigns a new project as @project' do
      get :new, {}

      expect(assigns(:project)).to be_a_new(Project)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested project as @project' do
      project = Project.create! valid_attributes
      @user.projects << project

      get :edit, {id: project.to_param}

      expect(assigns(:project)).to eq(project)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Project' do
        expect {
          post :create, {project: valid_attributes}
        }.to change(Project, :count).by(1)
      end

      it 'assigns a newly created project as @project' do
        post :create, {project: valid_attributes}
        expect(assigns(:project)).to be_a(Project)
        expect(assigns(:project)).to be_persisted
      end

      it 'redirects to the created project' do
        post :create, {project: valid_attributes}
        expect(response).to redirect_to(Project.last)
      end

      it 'invites all users on the invitations list' do
        @user2 = FactoryGirl.create(:user)
        post :create, {project: valid_attributes, invitations: {user: @user2.email}}
        expect(Invitation.find_by_user_id(@user2.id)).not_to be_nil
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved project as @project' do
        post :create, {project: invalid_attributes}
        expect(assigns(:project)).to be_a_new(Project)
      end

      it "re-renders the 'new' template" do
        post :create, {project: invalid_attributes}
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        {title: 'New Title'}
      }

      it 'updates the requested project' do
        project = Project.create! valid_attributes
        @user.projects << project

        put :update, {id: project.to_param, project: new_attributes}
        project.reload

        expect(project.title).to eq('New Title')
      end

      it 'assigns the requested project as @project' do
        project = Project.create! valid_attributes
        @user.projects << project

        put :update, {id: project.to_param, project: valid_attributes}

        expect(assigns(:project)).to eq(project)
      end

      it 'redirects to the project' do
        project = Project.create! valid_attributes
        @user.projects << project

        put :update, {id: project.to_param, project: valid_attributes}

        expect(response).to redirect_to(project)
      end
    end

    context 'with invalid params' do
      it 'assigns the project as @project' do
        project = Project.create! valid_attributes
        @user.projects << project

        put :update, {id: project.to_param, project: invalid_attributes}

        expect(assigns(:project)).to eq(project)
      end

      it "re-renders the 'edit' template" do
        project = Project.create! valid_attributes
        @user.projects << project

        put :update, {id: project.to_param, project: invalid_attributes}

        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested project' do
      project = Project.create! valid_attributes
      @user.projects << project

      expect {
        delete :destroy, {id: project.to_param}
      }.to change(Project, :count).by(-1)
    end

    it 'redirects to the projects list' do
      project = Project.create! valid_attributes
      @user.projects << project

      delete :destroy, {id: project.to_param}

      expect(response).to redirect_to(projects_url)
    end

#    it 'destroys every associated Invitation and EventProjectInvitation' do
#      user2 = FactoryGirl.create(:user)
#      project = Project.create! valid_attributes
#      @user.projects << project
#
#      expect(Invitation.all.size).to eq(0)
#      expect(Event.all.size).to eq(0)
#
#      put :invite_user, {id: project.to_param, invite_user: {email: user2.email}}
#
#      expect(Invitation.all.size).to eq(1)
#      expect(Event.all.size).to eq(1)
#
#      delete :destroy, {id: project.to_param}
#      expect(Invitation.all.size).to eq(0)
#      expect(Event.all.size).to eq(0)
#    end
  end

  # invitations are deprecated
#  describe 'POST #invite_user' do
#    before :each do
#      @project = Project.create! valid_attributes
#      @user2 = FactoryGirl.create(:user)
#      @user.projects << @project
#    end
#
#    it 'send the user an invitation if a valid email was given' do
#      expect(Invitation.all.size).to eq(0)
#      expect {
#        put :invite_user, {id: @project.to_param, invite_user: {email: @user2.email}}
#      }.to change(Invitation.all, :count).by(1)
#      expect(Invitation.first.user).to eq @user2
#      expect(Invitation.first.project).to eq @project
#    end
#
#    it 'does not invite the user to the project if an invalid email was given' do
#      expect {
#        put :invite_user, {id: @project.to_param, invite_user: {email: 'invalid@email'}}
#      }.to change(Invitation.all, :count).by(0)
#    end
#
#    it 'does not invite the user to the project if he already is a member' do
#      @project.users << @user2
#      expect {
#        put :invite_user, {id: @project.to_param, invite_user: {email: @user2.email}}
#      }.to change(Invitation.all, :count).by(0)
#    end
#
#    it 'does not add the user to the project if he already is invited' do
#      Invitation.create(user: @user2, project: @project)
#      expect {
#        put :invite_user, {id: @project.to_param, invite_user: {email: @user2.email}}
#      }.to change(@project.users, :count).by(0)
#    end
#
#    it 'shows an error message if the user does not exist' do
#      put :invite_user, {id: @project.to_param, invite_user: {email: 'does not exist'}}
#      assert_equal 'This user does not exist.', flash[:error]
#    end
#
#    it 'does not invite the user if user is superadmin' do
#      superadmin = FactoryGirl.create(:user, superadmin: true)
#      expect {
#        put :invite_user, {id: @project.to_param, invite_user: {email: superadmin.email}}
#      }.to change(Invitation.all, :count).by(0)
#    end
#  end

  # moved to user#autocomplete
#  describe 'GET #typeahead' do
#    it 'returns the query result as json' do
#      project = Project.create! valid_attributes
#      matching_user = User.create(name: 'Max Mueller', email: 'max.mueller@student.hpi.de')
#      not_matching_user = User.create(name: 'Not Matching', email: 'not.matching@email.de')
#      get :typeahead, {query: 'hpi'}
#      expect(response.body).to have_content matching_user.email
#      expect(response.body).to_not have_content not_matching_user.email
#    end
#  end

#  describe 'GET #accept_invitation' do
#    it 'rejects the invitation if user is superadmin' do
#      @user2 = FactoryGirl.create(:user)
#
#      post :create, {project: valid_attributes, invitations: {user: @user2.email}}
#
#      expect(Invitation.find_by_user_id(@user2.id)).not_to be_nil
#
#      @user2.update(superadmin: true)
#      @user2.reload
#
#      login_with @user2
#
#      get :accept_invitation, {id: Project.last.id}
#
#      expect(flash[:error]).not_to be_nil
#      expect(response).to redirect_to(dashboard_path)
#    end
#  end

  describe 'GET #hiwi_working_hours' do
    it 'returns the sum of all hiwi working hours as JSON' do
      project = Project.create! valid_attributes
      user1 = FactoryGirl.create(:user)
      FactoryGirl.create(:contract, hiwi: user1)
      user2 = FactoryGirl.create(:user)
      FactoryGirl.create(:contract, hiwi: user2)
      project.users << user1
      project.users << user2

      FactoryGirl.create(:work_day,
        date: Date.today.beginning_of_month + 2.days,
        start_time: '2000-01-01 15:00:00',
        break: 30,
        end_time: '2000-01-01 16:00:00',
        user: user1,
        project: project)
      FactoryGirl.create(:work_day,
        date: Date.today.beginning_of_month + 1.week,
        start_time: '2000-01-01 10:00:00',
        break: 0,
        end_time: '2000-01-01 18:00:00',
        user: user2,
        project: project)

      get :hiwi_working_hours, {month_year: Date.today.strftime('%-m-%Y')}
      expect(response.body).to eq("{\"msg\":[{\"name\":\"My Project\",\"y\":9}]}")
    end
  end
end
